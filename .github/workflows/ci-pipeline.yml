on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  deployments: write
  packages: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade -r src/requirements-dev.txt

    - name: Lint code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

    - name: Set environment variable
      run: echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run unit tests
      env:
        RABBITMQ_URI: ${{ secrets.RABBITMQ_URI }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      run: |
        pytest --cov=src src/tests/ci --cov-report=html:src/tests/ci/coverage.html

    - name: Checking code vulnerabilities
      run: |
        bandit -r .
  build:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Restore pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install setuptools
      run: |
        python -m pip install --upgrade --force-reinstall pip setuptools

    - name: Build project
      run: |
        python setup.py sdist bdist_wheel
        ls dist/
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get the latest tag
      id: get_tag
      run: |
        latest_tag=$(git tag --list "v*" | sort -V | tail -n 1)
        echo "Latest tag: $latest_tag"
        echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

    - name: Increment the tag
      id: increment_tag
      run: |
        latest_tag="${{ env.LATEST_TAG }}"
        if [ -z "$latest_tag" ]; then
          new_tag="v1.0.0-alpha-$(date +%Y%m%d%H%M%S)"
        else
          IFS='.' read -r -a version <<< "${latest_tag#v}"
          major=${version[0]}
          minor=${version[1]}
          patch=${version[2]}
          patch=$((patch + 1))
          new_tag="v${major}.${minor}.${patch}-alpha"
        fi
        echo "New tag: $new_tag"
        echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
          echo "Tag ${{ env.NEW_TAG }} already exists"
          exit 1
        fi

    - name: Create new tag
      if: success()
      run: |
        git tag ${{ env.NEW_TAG }}
        git push origin -f ${{ env.NEW_TAG }}

    - name: Build project
      run: |
        python setup.py sdist bdist_wheel

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
          name: build-artifact
          path: dist/my-python-project-0.1.0.tar.gz

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_TAG }}
        files: dist/my-python-project-0.1.0.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

        asset_name: my-python-project-0.1.0.tar.gz
        asset_content_type: application/gzip

